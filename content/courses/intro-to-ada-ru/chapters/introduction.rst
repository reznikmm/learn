:prev_state: False

.. include:: ../../global.txt

Введение
========

История
-------

В 1970-х годах Министерство обороны Соединенных Штатов (МО) страдало
от резкого увеличения числа языков программирования, в различных
проектах использовались разные и нестандартные диалекты или языковые
подмножества / суперсеты. Что бы решить эту проблему, Министерство обороны
направило запрос на предложения по общему современному языку программирования.
Победителем стало предложение, представленное Жаном Ичбией из CII Honeywell-Bull.

Первый стандарт Ada был выпущен в 1983 году; впоследствии он был
пересмотрен и усовершенствован в 1995, 2005 и 2012 годах, причем
каждый пересмотр приносил новые полезные функции.

Этот учебник будет посвящен Ada 2012 в целом, а не обучению различным
версиям языка.

Ada сегодня
-----------

Сегодня Ada широко используется во встроенных системах реального
времени, многие из которых имеют решающее значение для безопасности.
Хотя Ada может использоваться в качестве языка общего назначения,
он отлично подойдет для низкоуровневых приложений:

-  Встроенные системы с требованиями к памяти ограниченного объёма
   (сборщик мусора не допускается).
-  Прямое взаимодействие с оборудованием.
-  Мягкие или жесткие системы реального времени.
-  Программирование низкоуровневых систем.

Конкретные области, в которых используется Ada, включают
аэрокосмическую и оборонную промышленность, гражданскую авиацию,
железную дорогу и многие другие. Эти приложения требуют высокой
степени безопасности: дефект программного обеспечения не просто
раздражает, но может иметь серьезные последствия. Язык Ada
предоставляет функции безопасности. Функции безопасности обнаруживают
дефекты на ранней стадии |mdash| обычно во время компиляции или с помощью
инструментов статического анализа. Ada также можно использовать для
создания приложений в различных других областях, таких как:

-  `Программирование видеоигр <https://github.com/AdaDoom3/AdaDoom3>`_
-  `Аудио в реальном времени <http://www.electronicdesign.com/embedded-revolution/assessing-ada-language-audio-applications>`_
-  `Модули ядра <http://www.nihamkin.com/tag/kernel.html>`_

Это неполный список, который, надеюсь, прольет свет на то, в каком
виде программирования хорош язык Ada.

С точки зрения современных языков, наиболее близкими с точки зрения
целей и уровня абстракции, вероятно, являются
`C++ <https://en.wikipedia.org/wiki/C%2B%2B>`_ и
`Rust <https://www.rust-lang.org/en-US/>`_.

Философия
---------

Философия языка Ada отличается от большинства других языков. В основе
дизайна Ada лежат принципы, которые включают следующее:

-  Удобочитаемость важнее краткости. Синтаксически это проявляется в том,
   что ключевые слова предпочтительнее символов, что ни одно ключевое
   слово не является аббревиатурой и т.д.

-  Очень строгая типизация. В Ada очень легко вводить новые типы, что
   позволяет предотвратить ошибки использования данных.

   -  В этом отношении он похож на многие функциональные языки, за
      исключением того, что программист должен гораздо более четко описывать
      набор типов в Ada, потому что здесь почти нет интерфейсов типов.

-  Явное действие лучше, чем неявное. Хотя это заповедь языка
   `Python <https://www.python.org>`_, Ada
   идет дальше, чем любой известный нам язык:

   -  В большинстве случаев структурная типизация отсутствует, и программист
      должен явно указывать большинство типов.

   -  Как уже говорилось ранее, в основном нет интерфейса типа.

   -  Семантика очень хорошо определена, а неопределенное поведение сводится
      к абсолютному минимуму.

   -  Обычно программист может предоставить компилятору (и другим
      программистам) много *lot* информации о том, что означает их программа. Это
      позволяет компилятору быть чрезвычайно полезным (читай: строгим)
      программисту.

В ходе этого курса мы объясним отдельные языковые особенности, которые
являются строительными блоками для этой философии.

SPARK
-----

Хотя этот курс посвящен исключительно языку Ada, стоит упомянуть, что
существует еще один язык, чрезвычайно близкий к Ada и совместимый с
ним: язык SPARK.

SPARK |mdash| это подмножество Ada, разработанное таким образом, что код,
написанный на SPARK, поддается автоматической проверке. Это
обеспечивает гораздо более высокий уровень уверенности в правильности
вашего кода, чем при использовании обычного языка программирования.

Существует
`специальный курс для языка SPARK <https://learn.adacore.com/courses/intro-to-spark/index.html>`_.
Когда мы говорим о
возможностях спецификации Ada во время этого курса, вы можете
использовать эту возможность в SPARK, чтобы помочь доказать
правильность программы и ее свойств, начиная от отсутствия ошибок во
время выполнения до соответствия формально определенным функциональным
требованиям.


